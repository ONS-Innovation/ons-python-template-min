{%- import 'macros.jinja' as macros with context -%}
# {{ repository_name }}

[![Build Status](https://github.com/{{ repository_owner }}/{{ repository_name }}/actions/workflows/ci.yml/badge.svg)](https://github.com/{{ repository_owner }}/{{ repository_name }}/actions/workflows/ci.yml) {%- if is_public_repo %}
[![Build Status](https://github.com/{{ repository_owner }}/{{ repository_name }}/actions/workflows/codeql.yml/badge.svg)](https://github.com/{{ repository_owner }}/{{ repository_name }}/actions/workflows/codeql.yml)
{%- endif %}

[![Linting: Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)
[![Security: Bandit](https://img.shields.io/badge/security-bandit-yellow.svg)](https://github.com/PyCQA/bandit)
[![{{ package_manager }}-managed](https://img.shields.io/badge/{{ package_manager }}-managed-blue)]({{ macros.package_manager_url() }})
[![License - MIT](https://img.shields.io/badge/licence%20-MIT-1ac403.svg)](https://github.com/{{ repository_owner }}/{{ repository_name }}/blob/main/LICENSE)

{{ repository_description }}

**IMPORTANT**: This README was generated from a template.
Please update it with specific information about your project, including:

> - Detailed project description and purpose
> - Specific installation requirements
> - Usage examples and API documentation
> - Contributing guidelines specific to your project
> - Any project-specific compliance requirements

---

## Compliance Checklist

Before you start developing, please ensure you've completed the following compliance requirements:

- [ ] **CODEOWNERS**: Update `.github/CODEOWNERS` with the appropriate team/individuals responsible for this repository
- [ ] **README**: Update this README with project-specific information (remove this notice when done)
- [ ] **Repository Settings**: Ensure branch protection rules are enabled (should be automatic if using template setup)
{%- if is_public_repo %}
- [ ] **CodeQL Setup**: If you encounter CodeQL conflicts, disable GitHub's default CodeQL setup in repository settings: `Settings > Code security and analysis > Code scanning > CodeQL analysis > Disable`
{%- endif %}
- [ ] **Security**: Review and configure security settings appropriate for your project
{%- if not is_public_repo %}
- [ ] **PIRR**: Complete the `PIRR.md` file with reasoning for private/internal repository status
{%- endif %}
- [ ] **License**: Verify the LICENSE file is appropriate for your project
- [ ] **Dependencies**: Review and update dependencies as needed for your project

---

## Table of Contents

[//]: # (:TODO: Enable link checking once https://github.com/tcort/markdown-link-check/issues/250 is resolved.)
<!-- markdown-link-check-disable -->
- [Getting Started](#getting-started)
    - [Pre-requisites](#pre-requisites)
    - [Installation](#installation)
- [Development](#development)
    - [Run Tests with Coverage](#run-tests-with-coverage)
    - [Linting and Formatting](#linting-and-formatting)
- [Contributing](#contributing)
- [License](#license)
<!-- markdown-link-check-enable -->

## Getting Started

To get a local copy up and running, follow these simple steps.

### Pre-requisites

Ensure you have the following installed:

1. **Python**: Version specified in `.python-version`. We recommend using [pyenv](https://github.com/pyenv/pyenv) for
   managing Python versions.
2. **[{{ package_manager | title }}]({{ macros.package_manager_url() }})**: This is used to manage package dependencies and virtual
   environments.
3. **[Docker](https://docs.docker.com/engine/install/)**
4. **Operation System**: Ubuntu/MacOS

### Installation

1. Clone the repository and install the required dependencies.

   ```bash
   git clone https://github.com/{{ repository_owner }}/{{ repository_name }}.git
   ```

2. Install dependencies

   [{{ package_manager | title }}]({{ macros.package_manager_url() }}) is used to manage dependencies in this project. For more information, read
   the [{{ package_manager | title }} documentation]({{ macros.package_manager_url() }}).

   To install all dependencies, including development dependencies, run:

   ```bash
   make install-dev
   ```

   To install only production dependencies, run:

   ```bash
   make install
   ```

3. Run the application

   ```bash
   make run
   ```

## Development

Get started with development by running the following commands.
Before proceeding, make sure you have the development dependencies installed using the `make install-dev` command.

A Makefile is provided to simplify common development tasks. To view all available commands, run:

```bash
make
```

### Run Tests with Coverage

The unit tests are written using the [pytest](https://docs.pytest.org/en/stable/) framework. To run the tests and check
coverage, run:

```bash
make test
```

### Linting and Formatting

Various tools are used to lint and format the code in this project.

#### Python

The project uses [Ruff](https://github.com/astral-sh/ruff) for linting and formatting, [MyPy](https://mypy-lang.org/) for type checking, and [Bandit](https://bandit.readthedocs.io/en/latest/) for security scanning.

All tools are configured using the unified `pyproject.toml` file.

To lint the Python code and run security scans, run:

```bash
make lint
```

To auto-format the Python code and correct fixable linting issues, run:

```bash
make format
```

To run security scanning specifically, run:

```bash
make security-scan
```

#### Pre-commit Hooks

The project includes pre-commit hooks to automatically run linting, formatting, and security checks before each commit. To set up pre-commit hooks:

```bash
pip install pre-commit
pre-commit install
```

This will automatically run Ruff, MyPy, and Bandit on staged files before allowing commits.

## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md) for details.

## License

See [LICENSE](LICENSE) for details.
